/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package ChemSafetyAsst;
import static spark.Spark.*;
import java.io.*;
import java.net.URI;
import java.net.http.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

public class App {

    //constants for API calls
    private static String pugViewUrl = "https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/data/compound/";
    private static String pugRestUrl = "https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/";

    /** Enables CORS on requests. This method is an initialization method and 
     * should be called once.
     * From SparkJava tutorial https://sparkjava.com/tutorials/cors 
     */
    private static void enableCORS(final String origin, final String methods, final String headers) {

        options("/*", (request, response) -> {

            String accessControlRequestHeaders = request.headers("Access-Control-Request-Headers");
            if (accessControlRequestHeaders != null) {
                response.header("Access-Control-Allow-Headers", accessControlRequestHeaders);
            }

            String accessControlRequestMethod = request.headers("Access-Control-Request-Method");
            if (accessControlRequestMethod != null) {
                response.header("Access-Control-Allow-Methods", accessControlRequestMethod);
            }

            return "OK";
        });

        before((request, response) -> {
            response.header("Access-Control-Allow-Origin", origin);
            response.header("Access-Control-Request-Method", methods);
            response.header("Access-Control-Allow-Headers", headers);
            // Note: this may or may not be necessary in your particular application
            // response.type("application/json");
        });
    }

    /**
     * Create an HTTPRequest to get hazards from a single CID using an API
     * call to PUGView.
     * @param cid   the CID to search
     */
    private static HttpRequest hazardsFromCIDrequest(String cid) {
        HttpRequest getPUGViewData = HttpRequest.newBuilder()
            .uri(
                URI.create(pugViewUrl+cid+"/JSON?heading=GHS%20Classification")
            ).build();
        System.out.println(getPUGViewData.uri());
        return getPUGViewData;
    }

    /**
     * Create an HTTPRequest to get chemical info for multiple CIDs in one API
     * call to PUGRest. 
     * @param cids  the CIDs to search
     */
    private static HttpRequest chemicalInfoFromMultipleCIDRequest(ArrayList<String> cids){
        String uriQuery = String.join(",",cids);
        System.out.println(uriQuery);
        HttpRequest getPUGRestData = HttpRequest.newBuilder()
            .uri(
                URI.create(pugRestUrl+"cid/"+uriQuery+"/property/MolecularFormula,MolecularWeight,CanonicalSMILES,IUPACName,Title/JSON")
            ).build();
        System.out.println(getPUGRestData.uri());
        return getPUGRestData;
    }

    /**
     * Parse hazard information into nested list format from JSON Node returned
     * by API call to PUGView
     */
    private static ArrayList<String[]> createHazardList(JsonNode hazardData) {
        ArrayList<String[]> hazardReturn = new ArrayList<String[]>();
        Iterator<JsonNode> hazards = hazardData.elements();
        while (hazards.hasNext()){
            JsonNode oneHazard = hazards.next();
            System.out.println(oneHazard.path("String").textValue().split(":")[0]);
            String hazInfo[] = oneHazard.path("String").textValue().split(":");
            hazardReturn.add(hazInfo);
        }
        return hazardReturn;
    }

    /**
     * 
     * @param smiles    a SMILES string molecular representation
     * @return  an HTTPRequest to get CID from SMILES from PubChem
     */
    private static HttpRequest cidFromSMILESRequest(String smiles){
        HttpRequest getPUGRestCID = HttpRequest.newBuilder()
        .uri(
            URI.create(pugRestUrl+"smiles/"+smiles+"/cids/json")
        ).build();
        return getPUGRestCID;
    }
    
    /**
     * 
     * @param name  a string to use to search for a chemical
     * @return an HTTPRequest to get CID from a name from PubChem
     */
    private static HttpRequest cidFromNameRequest(String name){
        HttpRequest getPUGRestCID = HttpRequest.newBuilder()
        .uri(
            URI.create(pugRestUrl+"name/"+name+"/cids/json")
        ).build();
        return getPUGRestCID;
    }

    /**
     * 
     * @param chemical  The Chemical object for which to get hazards
     * @param client    the app's active HttpClient object
     * @param objectMapper  the app's active ObjectMapper object
     * @throws IOException
     * @throws InterruptedException
     */
    private static void getHazardsByCID(Chemical chemical, HttpClient client, ObjectMapper objectMapper) throws IOException, InterruptedException{
        HttpRequest hazardRequest = hazardsFromCIDrequest(chemical.getCID());
        HttpResponse<String> hazardResponse;
        try {
            hazardResponse = client.send(
                hazardRequest, HttpResponse.BodyHandlers.ofString()
                );
            } catch (IOException e) {
                System.out.println("IO exception occurred");
                throw new IOException("error in hazardRequest");
            } catch (InterruptedException e){
                System.out.println("Interrupted exception occurred");
                throw new InterruptedException("error in hazardRequest");
            }

        JsonNode hazardRoot = objectMapper.readTree(hazardResponse.body());

        // Handle case where CID record exists but no formal GHS hazards header
        JsonNode faultNode = hazardRoot.path("Fault");
        if (!faultNode.isMissingNode()){
            return;
        }

        JsonNode hazardCheckpoint = hazardRoot
            .path("Record")
            .path("Section")
            .get(0)
            .path("Section")
            .get(0)
            .path("Section")
            .get(0)
            .path("Information");

        // for debugging             
        System.out.println("the size is "+ hazardCheckpoint.size());

        if (hazardCheckpoint.size() > 1){
            JsonNode hazardCodes = hazardRoot
                .path("Record")
                .path("Section")
                .get(0)
                .path("Section")
                .get(0)
                .path("Section")
                .get(0)
                .path("Information")
                .get(2)
                .path("Value")
                .path("StringWithMarkup");
            ArrayList<String[]> hazardList = createHazardList(hazardCodes);

            //for debugging
            System.out.println(hazardList);

            chemical.setHazards(hazardList);

            JsonNode precautionCodes = hazardRoot
                .path("Record")
                .path("Section")
                .get(0)
                .path("Section")
                .get(0)
                .path("Section")
                .get(0)
                .path("Information")
                .get(3)
                .path("Value")
                .path("StringWithMarkup")
                .get(0);

            String[] precInfo = precautionCodes
                .path("String").textValue().split(", and |, |and ");
            
            // for debugging
            System.out.println(precautionCodes);
            System.out.println(precInfo);

            chemical.setPrecautions(precInfo);
        } else {
            // if no CID, set hazard info to empty arrays
            ArrayList<String[]> hazardList = new ArrayList<String[]>();
            chemical.setHazards(hazardList);
            String[] precautionList = new String[0];
            chemical.setPrecautions(precautionList);
        };
        chemical.setGotHazards();
    }

    //main app starts here
    public static void main(String[] args) {
        // port for deployment
        port(80);

        // Setup; need one of each of these 
        enableCORS("*", "GET", "*");
        HttpClient client = HttpClient.newBuilder().build();
        ObjectMapper objectMapper = new ObjectMapper();

        /**
         * Core app route -- returns JSON object with chemical information
         */
        get("/chemicals", (req, res) -> {

            // Holds the Chemical objects
            HashMap<String,Chemical> chemicals = new HashMap<String, Chemical>();
            // Holds valid PubChem CIDs from lookups
            ArrayList<String> cids = new ArrayList<String>();

            for(String param : req.queryParams()){
                // for debugging
                System.out.println(param);

                for (String value : req.queryParamsValues(param)){
                    Chemical newChemical = new Chemical(value);

                    // Try search by name
                    // %20 encode space by replacing + from urlify;
                    // won't do this with SMILES b/c could expect + used
                    // with meaning in that context
                    HttpRequest cidRequest = cidFromNameRequest(newChemical.urlify().replace("+", "%20"));
                    // for debugging
                    System.out.println(cidRequest.uri());

                    HttpResponse<String> cidResponse;
                    try {
                        cidResponse = client.send(
                            cidRequest, HttpResponse.BodyHandlers.ofString()
                            );
                    } catch (IOException e) {
                        System.out.println("IO exception occurred");
                        throw new IOException("error in cidRequest");
                    }
                    if (cidResponse.statusCode() == 200){
                        JsonNode rootNode = objectMapper.readTree(cidResponse.body());
                        String cid = rootNode.path("IdentifierList")
                            .path("CID")
                            .get(0)
                            .toString();
                        
                        newChemical.setCID(cid);
                        getHazardsByCID(newChemical, client, objectMapper);
                        chemicals.put(newChemical.getCID(), newChemical);
                        cids.add(cid);
                    } else {
                        // Try search by SMILES
                        HttpRequest cidRequestSMILES = cidFromSMILESRequest(newChemical.urlify());
                        System.out.println(cidRequestSMILES.uri());
                        HttpResponse<String> cidResponseSMILES;
                        try {
                            cidResponseSMILES = client.send(
                                cidRequestSMILES, HttpResponse.BodyHandlers.ofString()
                                );
                        } catch (IOException e) {
                            System.out.println("IO exception occurred");
                            throw new IOException("error in cidRequest");
                        };

                        if (cidResponseSMILES.statusCode() == 200){
                            JsonNode rootNode = objectMapper.readTree(cidResponseSMILES.body());
                            String cid = rootNode.path("IdentifierList")
                                .path("CID")
                                .get(0)
                                .toString();
                            if(cid == "0"){
                                String keyString = "noCID_" + value;
                                chemicals.put(keyString, newChemical);
                            } else {
                                newChemical.setCID(cid);
                                getHazardsByCID(newChemical, client, objectMapper);
                                chemicals.put(newChemical.getCID(), newChemical);
                                cids.add(cid);
                            }
                        } else {
                            String keyString = "noCID_" + value;
                            chemicals.put(keyString, newChemical);
                        };
                    };
                };
            };

            // get chemical info for chemicals with CID
            HttpRequest chemInfoRequest = chemicalInfoFromMultipleCIDRequest(cids);
            // for debugging
            System.out.println(chemInfoRequest);
            HttpResponse<String> chemInfoResponse;
            try {
                chemInfoResponse = client.send(
                    chemInfoRequest, HttpResponse.BodyHandlers.ofString()
                    );
            } catch (IOException e) {
                System.out.println("IO exception occurred");
                throw new IOException("error in cidRequest");
            }

            if (chemInfoResponse.statusCode() == 200){
                // for debugging
                System.out.println("successful request");
                JsonNode rootNode = objectMapper.readTree(chemInfoResponse.body());
                Iterator<JsonNode> chemInfoIterator = rootNode.path("PropertyTable")
                    .get("Properties").elements();

                // iterate over object returned by PUGREST multi-CID property lookup    
                while(chemInfoIterator.hasNext()){
                    JsonNode chemInfoBlock = chemInfoIterator.next();
                    // for debugging
                    System.out.println(chemInfoBlock);

                    String activeCID = chemInfoBlock.get("CID").toString();

                    //for debugging
                    System.out.println("CID is "+activeCID);

                    Chemical activeChemical = chemicals.get(activeCID);
                    activeChemical.setCommonName(chemInfoBlock.get("Title").asText());
                    activeChemical.setCanonicalSMILES(chemInfoBlock.get("CanonicalSMILES").asText());
                    activeChemical.setIupacName(chemInfoBlock.get("IUPACName").asText());
                }
            }

            String chemicalJson = objectMapper.writeValueAsString(chemicals);
            return chemicalJson;
        });
        
        /**
         * "Hello, I am alive" route
         */
        get("/hello", (req, res) -> 
        {
            return "{\"Hello World\"}";
        });

        /**
         * For halting a local server from the browser
         */
        // get("/stop", (req, res) -> {
        //     stop();
        //     return "stopping";
        // });
    }
}
